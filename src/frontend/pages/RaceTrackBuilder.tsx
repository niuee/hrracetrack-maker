import React, { useEffect, useRef } from 'react';
import {Grid, Typography, Tooltip, TextField, Stack, Card, CardActionArea, CardMedia, CardContent} from '@mui/material';
import { Button } from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import { BezierCurve, HandleType } from '../modules/BezierCurve';
import { PointCal } from 'point2point';
import { TrackCurveMediator } from '../modules/BuilderPageMediator';
import { generateUUID } from 'three/src/math/MathUtils';
import ViewInArIcon from '@mui/icons-material/ViewInAr';
import WidgetsOutlinedIcon from '@mui/icons-material/WidgetsOutlined';

const defaultImage = "";

type CanvasCircle = {
    centerx: number
    centery: number
    radius:number
}

type SegmentListDisplay = {
    name: string
    ident: string
    selected: boolean
    editing: boolean
}

type CurveListDisplay = {
    name: string
    ident: string
    selected: boolean
    beingEdited: boolean
}

export type TrackData = {
    curves: CurveData[];
    scale: number
}

export type CurveData = {
    name: string;
    curveSegments: {
        segmentType: string;
        points: {
            x: number;
            y: number;
        }[];
    }[]
}

type SegmentData = {
    name: string;
    type: string;
    curveSegments: {
        segmentType: string;
        points: {
            x: number;
            y: number;
        }[];
    }[]
}

export enum ViewMode {
    OBJECT = "OBJECT",
    EDIT = "EDIT",
}

export default function RaceTrackBuilder():JSX.Element {
    const navigate = useNavigate();
    const requestRef = React.useRef<number>();
    let start_point = React.useRef<{centerx: number, centery:number, raidus:number}>(null);


    // what I want remain
    const trackCurveMediator = useRef<TrackCurveMediator>(new TrackCurveMediator());
    const [curvesList, setCurveList] = React.useState<CurveListDisplay[]>([]);
    const [viewMode, setviewMode] = React.useState<ViewMode>(ViewMode.OBJECT);
    const modeRef = React.useRef<ViewMode>(ViewMode.OBJECT);
    const grabEngagedRef = React.useRef<boolean>(false);
    const grabEngagedCursorPosRef = React.useRef<{x: number, y: number}>(null);
    const cursorPosRef = React.useRef<{x:number, y: number}>(null)

    // Create Staright line Button Attributes
    const [imgString, setImgString] = React.useState(defaultImage);
    let picking_spot = React.useRef<boolean>(false);

    let cameraOffset = { x: -window.innerWidth / 2, y: -window.innerHeight / 2 }
    let cameraZoom = 1
    let MAX_ZOOM = 5
    let MIN_ZOOM = 0.1
    let SCROLL_SENSITIVITY = 0.0005
    let isDragging = React.useRef<boolean>(false);
    let dragStart = { x: 0, y: 0 }
    let lastZoom = cameraZoom
    let canvas:HTMLCanvasElement;
    let racecourse_img:HTMLImageElement;
    let ctx = React.useRef<CanvasRenderingContext2D>();

    const setup = () => {
        canvas = document.getElementById("canvas") as HTMLCanvasElement
        racecourse_img = document.getElementById("racecourse_overlay") as HTMLImageElement
        ctx.current = canvas.getContext("2d");
         
        ctx.current.save();
        


        // Gets the relevant location from a mouse or single touch event
        setImgString(defaultImage);
        canvas.addEventListener('mousedown', onPointerDown)
        canvas.addEventListener('mouseup', onPointerUp)
        canvas.addEventListener('mousemove', onPointerMove)
        canvas.addEventListener( 'wheel', (e) => adjustZoom(e, e.deltaY*SCROLL_SENSITIVITY, 0.1))
        window.addEventListener('keydown', (e) => {
            if (e.altKey) {
                switchMode();
            } 
            if (e.code == "KeyG") {
                if (!grabEngagedRef.current && ((modeRef.current == ViewMode.EDIT && trackCurveMediator.current.hasGrabbedPoint()) || modeRef.current == ViewMode.OBJECT)) {
                    console.log("Engaging Grab Mode");
                    engageGrab();
                } else {
                    if (grabEngagedRef.current) {
                        console.log("Grab mode already engaged");
                    } else {
                        console.log("Unable to engage grab mode due to no grabbed point");
                    }
                }
            } else if (e.code == "Escape"){
                console.log("Disengaging grab mode");
                if (modeRef.current == ViewMode.OBJECT) {
                    trackCurveMediator.current.revertCurveToPrevPos();
                } else if (modeRef.current == ViewMode.EDIT) {
                    trackCurveMediator.current.revertPointToPrevPos();
                }
                disengageGrab();
            }
            
        });
        requestRef.current = requestAnimationFrame(draw);
        return ()=>{cancelAnimationFrame(requestRef.current)}
    };

    useEffect(setup, []);
    
    function draw(timestamp) {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // Translate to the canvas center before zooming - so you'll always zoom on what you're looking directly at

        ctx.current.restore();
        ctx.current.translate( window.innerWidth / 2, window.innerHeight / 2 );
        ctx.current.scale(cameraZoom, cameraZoom);
        ctx.current.translate(cameraOffset.x,  cameraOffset.y );
        trackCurveMediator.current.drawCurves(ctx.current, modeRef.current);
        draw_racecourse(window.innerWidth, window.innerHeight, ctx.current, racecourse_img);

        if (start_point.current != null) {
            drawCircles(ctx.current, {centerx: start_point.current.centerx, centery: start_point.current.centery, radius: start_point.current.raidus});
        }
        
        requestRef.current = requestAnimationFrame(draw);
    }




    function getEventLocation(e) {
        if (e.touches && e.touches.length == 1) {
            return { x:e.touches[0].clientX, y: e.touches[0].clientY };
        } else if (e.clientX && e.clientY) {
            return { x: e.clientX, y: e.clientY };
        }
    }

    function onPointerUp(e: MouseEvent) {
        if (e.button == 0) {
            isDragging.current = false;
            lastZoom = cameraZoom;
            let convertCoord = getEventLocation(e);
            if (convertCoord != null){
                let leftClickX = getEventLocation(e).x/cameraZoom - cameraOffset.x;
                let leftClickY = getEventLocation(e).y/cameraZoom - cameraOffset.y;
                if (picking_spot.current) {
                    start_point.current = {
                        centerx: leftClickX,
                        centery: leftClickY,
                        raidus: 100
                    };
                }
            }
        }
    }

    function onPointerDown(e: MouseEvent) {
        trackCurveMediator.current.clearEditingStatus();
        setCurveList(trackCurveMediator.current.getCurveList());
        if (e.button == 0 && e.metaKey) {
            isDragging.current = true;
            dragStart.x = getEventLocation(e).x/cameraZoom - cameraOffset.x;
            dragStart.y = getEventLocation(e).y/cameraZoom - cameraOffset.y;
        } else if (e.button == 0) {
            let leftClickX = getEventLocation(e).x/cameraZoom - cameraOffset.x - (window.innerWidth / 2 / cameraZoom);
            let leftClickY = getEventLocation(e).y/cameraZoom - cameraOffset.y - (window.innerHeight / 2 / cameraZoom);
            if (grabEngagedRef.current == false) {
                if (modeRef.current == ViewMode.EDIT){
                    console.log("Checking if clicked on something");
                    trackCurveMediator.current.handleClick({x: leftClickX, y: leftClickY});
                } 
            } else {
                // finalize the move
                console.log("Finalizing grabbed point movement");
                console.log("Disengaging grab mode");
                grabEngagedRef.current = false;
                grabEngagedCursorPosRef.current = null;
                // trackCurveMediator.current.holdSelectedCurveCusPos();
            }
        }
    }

    function onPointerMove(e:MouseEvent) {
        let convertCoord = getEventLocation(e);
        if (convertCoord == null){
            return;
        }
        cursorPosRef.current = {x: getEventLocation(e).x/cameraZoom - cameraOffset.x - (window.innerWidth / 2 / cameraZoom), y: getEventLocation(e).y/cameraZoom - cameraOffset.y - (window.innerHeight / 2 / cameraZoom)};
        if (isDragging.current) {
            console.log("Dragging camera");
            // dragging cmaera
            cameraOffset.x = getEventLocation(e).x/cameraZoom - dragStart.x
            cameraOffset.y = getEventLocation(e).y/cameraZoom - dragStart.y
        } else {
            // grab mode engaged; grab point or grab the selected curve
            if (modeRef.current == ViewMode.EDIT) {
                if (grabEngagedRef.current) {

                    if (trackCurveMediator.current.hasGrabbedPoint()) {
                        if (grabEngagedCursorPosRef.current != null) {
                            console.log("Grabbing in session for grabbed point(s)");
                            let cursorPosDiff = PointCal.subVector(cursorPosRef.current, grabEngagedCursorPosRef.current);
                            console.log("cursorDiff:", cursorPosDiff);
                            trackCurveMediator.current.handleGrab(modeRef.current,e.shiftKey, cursorPosDiff);
                        } else {
                            console.log("No known position of the cursor when grab mode is engaged");
                            grabEngagedCursorPosRef.current = cursorPosRef.current;
                        }
                    } else {
                        console.log("There is no grabbed point")
                    }
                }
            } else if (modeRef.current == ViewMode.OBJECT) {
                if (grabEngagedRef.current && grabEngagedCursorPosRef.current != null) {
                    console.log("Grabbing in session for entire curve(s)");
                    let cursorPosDiff = PointCal.subVector(cursorPosRef.current, grabEngagedCursorPosRef.current);
                    console.log("cursorDiff:", cursorPosDiff);
                    trackCurveMediator.current.handleGrab(modeRef.current, e.shiftKey, cursorPosDiff);
                }
            }
        } 
    }


    function drawCircles(context: CanvasRenderingContext2D, circle: CanvasCircle):void {
        context.moveTo(circle.centerx, circle.centery);
        context.setLineDash([])
        context.beginPath();
        context.arc(circle.centerx, circle.centery, circle.radius, 0, Math.PI * 2, true); // Outer circle
        context.stroke();
    }

    function draw_racecourse(canvas_width: number, canvas_height:number, context:CanvasRenderingContext2D, image:HTMLImageElement) {
        context.globalAlpha = 0.4;
        let image_ratio = image.height / image.width;
        let draw_width = canvas_width * 0.8;
        let draw_height =  draw_width * image_ratio;
        context.drawImage(image, canvas_width / 2 - draw_width / 2, canvas_height / 2 - draw_height / 2, draw_width, draw_height);
        context.globalAlpha = 1;
    }

    function adjustZoom(e, zoomAmount, zoomFactor) {
        if (!isDragging.current) {
            if (zoomAmount) {
                cameraZoom += zoomAmount
            } else if (zoomFactor) {
                // console.log(zoomFactor)
                cameraZoom = zoomFactor*lastZoom
            }
            
            cameraZoom = Math.min( cameraZoom, MAX_ZOOM )
            cameraZoom = Math.max( cameraZoom, MIN_ZOOM )
            // console.log(zoomAmount)
        }
    }

    function clickedCurveCard(e:React.MouseEvent<HTMLButtonElement>) {
        if (viewMode == ViewMode.EDIT) {
            return;
        }
        trackCurveMediator.current.clickedOnCurveCard(e.shiftKey, e.currentTarget.id);
        setCurveList(trackCurveMediator.current.getCurveList());
    }

    function doubleClickedCurveCard(e: React.MouseEvent) {
        if (viewMode == ViewMode.EDIT) {
            return;
        }
        if (e.button == 0) {
            // left double clicked
            // console.log("double clicked");
            trackCurveMediator.current.doubleClickedOnCurveCard(e.currentTarget.id);
            setCurveList(trackCurveMediator.current.getCurveList());
        }
    }

    function onClickdeleteSelectedSegments() {
        if (trackCurveMediator.current.getSelectedCurveSize() == 0) {
            alert("沒有選取的線段");
            // console.log("Nothing to be deleted")
        } else {
            trackCurveMediator.current.deleteSelectedCurve();
            setCurveList(trackCurveMediator.current.getCurveList());
        }
    }

    function onCurveNameFieldBlur(e: React.FocusEvent<HTMLInputElement>){
        // console.log("Text field out of focus");
        trackCurveMediator.current.clearEditingStatus();
        setCurveList(trackCurveMediator.current.getCurveList());
    }

    function onTextFieldFocus(e: React.FocusEvent<HTMLInputElement>) {
        e.target.setAttribute("style", "background-color: #eeeeee");
    }

    function onCurveNameChange(e: React.ChangeEvent<HTMLInputElement>, segmentIdent:string) {
        if (e.target.value == "") {
            return
        } else {
            trackCurveMediator.current.renameCurve(segmentIdent, e.target.value);
        }
    }

    function onChangeUploadImage(event: React.ChangeEvent<HTMLInputElement>) {
        if (event.target.files && event.target.files[0]) {
            const reader = new FileReader();
            reader.readAsDataURL(event.target.files[0]);
            reader.onloadend = () => {
                // Use a regex to remove data url part
                let  resString = reader.result as string
                const base64String = resString.replace('data:', '').replace(/^.+,/, '');  
                // console.log("base64String:", base64String);
                setImgString(base64String);
            };
        }
    } 

    function switchMode() {
        disengageGrab();
        setviewMode((curMode)=>{
            if (curMode == ViewMode.OBJECT) {
                modeRef.current = ViewMode.EDIT
                return ViewMode.EDIT
            } else {
                modeRef.current = ViewMode.OBJECT
                return ViewMode.OBJECT
            }
        });
    }

    function engageGrab(){
        grabEngagedRef.current = true;
        grabEngagedCursorPosRef.current = cursorPosRef.current;
        console.log("Cursor Position when grab mode engaged:", cursorPosRef.current);
        if (modeRef.current == ViewMode.OBJECT) {
            trackCurveMediator.current.holdSelectedCurveCusPos();
        } else if (modeRef.current == ViewMode.EDIT) {
            trackCurveMediator.current.holdGrabbedPointCurPos();
        }
    }

    function disengageGrab() {
        trackCurveMediator.current.releaseGrabbedPoint();
        grabEngagedRef.current = false;
        grabEngagedCursorPosRef.current = null;
    }

    function onClickAppendCurve(){
        trackCurveMediator.current.addCurve(generateUUID(), new BezierCurve());
        setCurveList(trackCurveMediator.current.getCurveList());
    }

    function onClickExtendCurve(prepend=false){
        trackCurveMediator.current.extendSelectedCurves(prepend);
    }

    function testFunctionButton(){
        trackCurveMediator.current.testOnSelectedCurves();
    }

    function changeGrabbedHandle2Type(type: HandleType){
        trackCurveMediator.current.changeGrabbedHandle2Type(type);
    }


    return (
        <div style={{position: 'relative'}}>
            <canvas id="canvas" style={{position:'absolute', top: 0, left: 0, width: "100%", height:"100vh", margin: "none"}}></canvas>
            <img id="racecourse_overlay" style={{display: "none"}} src={`data:image/jpeg;base64,${imgString}`} alt="racecourse" />
            <div style={{position: 'absolute', top:"90vh", left: "90vw"}}>Default Image Source: JRA</div>
            <Stack alignItems={'center'} spacing={2}style={{position: "absolute", margin:"50px", width: "10vw"}} >
                <div>
                    <Button onClick={()=>{navigate("/")}} variant="contained">回到首頁</Button>
                </div>
                <Button  onClick={onClickdeleteSelectedSegments} variant="contained">刪除選取的線段</Button>
                <Button  onClick={onClickAppendCurve} variant="contained">新增曲線</Button>
                <Button  onClick={()=>{onClickExtendCurve()}} variant="contained">往後延長曲線</Button>
                <Button  onClick={()=>{onClickExtendCurve(true)}} variant="contained">往前延長曲線</Button>
                <Button  onClick={testFunctionButton} variant="contained">測試功能按鈕</Button>
                <Button
                    variant="contained"
                    component="label">
                    上傳賽道底圖
                    <input
                        onChange={onChangeUploadImage}
                        type="file"
                        hidden
                    />
                </Button>
                <Button  onClick={() => {setImgString(defaultImage)}} variant="contained" >重設成預設賽道底圖</Button>
                <Button  style={{display: viewMode == ViewMode.OBJECT ? "none": "block"}} onClick={()=>{changeGrabbedHandle2Type(HandleType.ALIGNED)}} variant="contained" >變換選取的把手為 ALIGNED 模式 </Button>
                <Button  style={{display: viewMode == ViewMode.OBJECT ? "none": "block"}} onClick={()=>{changeGrabbedHandle2Type(HandleType.VECTOR)}} variant="contained" >變換選取的把手為 VECTOR 模式 </Button>
                <Button  style={{display: viewMode == ViewMode.OBJECT ? "none": "block"}} onClick={()=>{changeGrabbedHandle2Type(HandleType.FREE)}} variant="contained" >變換選取的把手為 FREE 模式 </Button>
            </Stack>

            <Stack alignItems={'center'} spacing={2}style={{position:"absolute", top: 100, left: "80vw", width: "10vw" }} >
                <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    flexWrap: 'wrap',
                }}>
                    {viewMode == ViewMode.OBJECT? <ViewInArIcon />: <WidgetsOutlinedIcon/>}   
                    <span>  {viewMode} 模式</span>
                </div>  
                <Card sx={{ maxWidth: 345 }} style={{width: "10vw", maxHeight:"40vh", overflowY:"scroll", opacity: 0.5}}>
                    <Stack spacing={1} style={{width: "100%"}}>

                        {curvesList.map((curve)=>{
                            return (
                                <Card style={{width: "100%", background: curve.selected? "#47e664": "white"}} key={curve.ident}>
                                    <CardActionArea id={curve.ident} onClick={clickedCurveCard} onDoubleClick={doubleClickedCurveCard}>
                                        <CardContent style={{textAlign: 'center'}}>
                                            { curve.beingEdited? 
                                                <TextField
                                                    fullWidth
                                                    required
                                                    label="線段名稱"
                                                    id={curve.ident+"Name"}
                                                    sx={{ mt: 1, /*width: '25ch'*/ }}
                                                    variant="filled"
                                                    InputProps={{
                                                        inputProps: {min:0}
                                                    }}
                                                    onChange={(e:React.ChangeEvent<HTMLInputElement>)=>{onCurveNameChange(e, curve.ident)}}
                                                    onBlur={onCurveNameFieldBlur}
                                                    onFocus={onTextFieldFocus}
                                                    // error={tankerIdFieldError}
                                                    // helperText={tankerIdFieldErrorHelperText}
                                                />:
                                            "線段: " + curve.name}
                                        </CardContent>
                                    </CardActionArea>
                                </Card>
                            );
                        })}
                    </Stack>
                </Card>
            </Stack>
        </div>
    )
}
